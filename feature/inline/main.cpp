#include <iostream>

using namespace std;


inline void int_swap(int *a, int *b){
    int tmp;
    tmp = *a;
    *a = *b;
    *b = tmp;
}

void std_inline(){
    // 内联函数
    // 1. 函数是一个可以重复使用的代码块，CPU 会一条一条地挨着执行其中的代码。CPU 在执行主调函数代码时如果遇到了被调函数，
    //    主调函数就会暂停，CPU 转而执行被调函数的代码；被调函数执行完毕后再返回到主调函数，主调函数根据刚才的状态继续往下执行。
    // 2. 函数调用是有时间和空间开销的。程序在执行一个函数之前需要做一些准备工作，要将实参、局部变量、返回地址以及若干寄存器都压入栈中，
    //    然后才能执行函数体中的代码；函数体中的代码执行完毕后还要清理现场，将之前压入栈中的数据都出栈，才能接着执行函数调用位置以后的代码。
    //    如果函数体代码比较多，需要较长的执行时间，那么函数调用机制占用的时间可以忽略；如果函数只有一两条语句，那么大部分的时间都会花费在函
    //    数调用机制上，这种时间开销就就不容忽视。
    // 3. 内联函数适用于"函数较短小"的函数，它是直接"用内联函数的代码替换掉调用处的函数调用"，即"将函数调用这一行代码使用函数体替换掉"
    // 4. 默认情况下，c++中，在类代码块中声明并定义的函数，都是内联函数。

    int a = 1;
    int b = 2;
    int_swap(&a, &b);
    std::cout << "a = " << a << endl;
    std::cout << "b = " << b << endl;
}


int main() {
/*  内联函数
    std_inline()
 */

}

